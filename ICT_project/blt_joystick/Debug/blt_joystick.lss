
blt_joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000324  000003b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000324  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800104  00800104  000003bc  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  0000042c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ceb  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000095e  00000000  00000000  000011c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000564  00000000  00000000  00001b25  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a4  00000000  00000000  0000208c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004ac  00000000  00000000  00002230  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000034e  00000000  00000000  000026dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002a2a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	dc c0       	rjmp	.+440    	; 0x1de <__vector_9>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 e2       	ldi	r30, 0x24	; 36
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 30       	cpi	r26, 0x06	; 6
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c4 d0       	rcall	.+392    	; 0x24c <main>
  c4:	2d c1       	rjmp	.+602    	; 0x320 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <ADC_init>:
uint16_t y_value = 0;

// ADC 초기화
void ADC_init()
{
	ADMUX = (1 << REFS0);  // 기준 전압 => 5V로 설정
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	87 b9       	out	0x07, r24	; 7
	
	// ADEN                => ADC enable
	// ADPS2, ADPS1, ADPS0 => 128 분주비
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0);  // 프리스케일러 128 (125kHz)
  cc:	87 e8       	ldi	r24, 0x87	; 135
  ce:	86 b9       	out	0x06, r24	; 6
  d0:	08 95       	ret

000000d2 <ADC_read>:
}

// ADC 값 읽기
uint16_t ADC_read(uint8_t channel)
{
	ADMUX = (ADMUX & 0xF8) | channel;  // 채널 선택
  d2:	97 b1       	in	r25, 0x07	; 7
  d4:	98 7f       	andi	r25, 0xF8	; 248
  d6:	89 2b       	or	r24, r25
  d8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);  // 변환 시작
  da:	86 b1       	in	r24, 0x06	; 6
  dc:	80 64       	ori	r24, 0x40	; 64
  de:	86 b9       	out	0x06, r24	; 6

	while (ADCSRA & (1 << ADSC));  // 변환 완료 대기
  e0:	36 99       	sbic	0x06, 6	; 6
  e2:	fe cf       	rjmp	.-4      	; 0xe0 <ADC_read+0xe>
	return ADC;
  e4:	84 b1       	in	r24, 0x04	; 4
  e6:	95 b1       	in	r25, 0x05	; 5
}
  e8:	08 95       	ret

000000ea <Timer_init>:

void Timer_init()
{
	TCCR2 |= (1 << WGM21) | (1 << CS22); // CTC모드, 64분주
  ea:	85 b5       	in	r24, 0x25	; 37
  ec:	8c 60       	ori	r24, 0x0C	; 12
  ee:	85 bd       	out	0x25, r24	; 37
	TIMSK = (1 << OCIE2); // Timer2 comp 인터럽트 활성화 부분
  f0:	80 e8       	ldi	r24, 0x80	; 128
  f2:	87 bf       	out	0x37, r24	; 55
	OCR2 = 249; // 0~249까지 카운트 되도록
  f4:	89 ef       	ldi	r24, 0xF9	; 249
  f6:	83 bd       	out	0x23, r24	; 35
	sei(); // 글로벌 인터럽트 활성화
  f8:	78 94       	sei
  fa:	08 95       	ret

000000fc <UART1_Transmit>:
}

// atmega -> 블루투스
void UART1_Transmit(unsigned char data)
{
	while(!(UCSR1A & (1 << UDRE1)));
  fc:	90 91 9b 00 	lds	r25, 0x009B	; 0x80009b <__TEXT_REGION_LENGTH__+0x7e009b>
 100:	95 ff       	sbrs	r25, 5
 102:	fc cf       	rjmp	.-8      	; 0xfc <UART1_Transmit>
	UDR1 = data;
 104:	80 93 9c 00 	sts	0x009C, r24	; 0x80009c <__TEXT_REGION_LENGTH__+0x7e009c>
 108:	08 95       	ret

0000010a <UART1_print>:
}

void UART1_print(char *str)
{
 10a:	0f 93       	push	r16
 10c:	1f 93       	push	r17
 10e:	cf 93       	push	r28
 110:	df 93       	push	r29
 112:	8c 01       	movw	r16, r24
	for(int i=0; str[i]; i++)
 114:	c0 e0       	ldi	r28, 0x00	; 0
 116:	d0 e0       	ldi	r29, 0x00	; 0
 118:	02 c0       	rjmp	.+4      	; 0x11e <UART1_print+0x14>
	{
		UART1_Transmit(str[i]);
 11a:	f0 df       	rcall	.-32     	; 0xfc <UART1_Transmit>
	UDR1 = data;
}

void UART1_print(char *str)
{
	for(int i=0; str[i]; i++)
 11c:	21 96       	adiw	r28, 0x01	; 1
 11e:	f8 01       	movw	r30, r16
 120:	ec 0f       	add	r30, r28
 122:	fd 1f       	adc	r31, r29
 124:	80 81       	ld	r24, Z
 126:	81 11       	cpse	r24, r1
 128:	f8 cf       	rjmp	.-16     	; 0x11a <UART1_print+0x10>
	{
		UART1_Transmit(str[i]);
	}
	//UART1_Transmit('\0'); // 문자열 보낼때
	UART1_Transmit('\n');
 12a:	8a e0       	ldi	r24, 0x0A	; 10
 12c:	e7 df       	rcall	.-50     	; 0xfc <UART1_Transmit>
}
 12e:	df 91       	pop	r29
 130:	cf 91       	pop	r28
 132:	1f 91       	pop	r17
 134:	0f 91       	pop	r16
 136:	08 95       	ret

00000138 <UART1_printNum>:

void UART1_printNum(uint16_t num)
{
 138:	cf 93       	push	r28
 13a:	df 93       	push	r29
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	2a 97       	sbiw	r28, 0x0a	; 10
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	de bf       	out	0x3e, r29	; 62
 148:	0f be       	out	0x3f, r0	; 63
 14a:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	itoa(num, buffer, 10);  // 정수 -> 문자열
 14c:	4a e0       	ldi	r20, 0x0A	; 10
 14e:	50 e0       	ldi	r21, 0x00	; 0
 150:	be 01       	movw	r22, r28
 152:	6f 5f       	subi	r22, 0xFF	; 255
 154:	7f 4f       	sbci	r23, 0xFF	; 255
 156:	a7 d0       	rcall	.+334    	; 0x2a6 <itoa>
	UART1_print(buffer);
 158:	ce 01       	movw	r24, r28
 15a:	01 96       	adiw	r24, 0x01	; 1
 15c:	d6 df       	rcall	.-84     	; 0x10a <UART1_print>
}
 15e:	2a 96       	adiw	r28, 0x0a	; 10
 160:	0f b6       	in	r0, 0x3f	; 63
 162:	f8 94       	cli
 164:	de bf       	out	0x3e, r29	; 62
 166:	0f be       	out	0x3f, r0	; 63
 168:	cd bf       	out	0x3d, r28	; 61
 16a:	df 91       	pop	r29
 16c:	cf 91       	pop	r28
 16e:	08 95       	ret

00000170 <UART0_Transmit>:
// atmega -> pc
void UART0_Transmit(unsigned char data)
{
	// UDRE0는 송신버퍼가 비어있는지 확인하는것으로
	// 송신버퍼가 비어있으면 1, 아니면 0임
	while(!(UCSR0A & (1 << UDRE0)));
 170:	5d 9b       	sbis	0x0b, 5	; 11
 172:	fe cf       	rjmp	.-4      	; 0x170 <UART0_Transmit>
	UDR0 = data;
 174:	8c b9       	out	0x0c, r24	; 12
 176:	08 95       	ret

00000178 <UART0_print>:
}

void UART0_print(char *str)
{
 178:	0f 93       	push	r16
 17a:	1f 93       	push	r17
 17c:	cf 93       	push	r28
 17e:	df 93       	push	r29
 180:	8c 01       	movw	r16, r24
	// 배열을 받아서 배열의 크기만큼 반복문을 돌려라
	for(int i=0; str[i]; i++)
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	d0 e0       	ldi	r29, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <UART0_print+0x14>
	{
		// 이때까지 받은 문자열을 송신
		UART0_Transmit(str[i]);
 188:	f3 df       	rcall	.-26     	; 0x170 <UART0_Transmit>
}

void UART0_print(char *str)
{
	// 배열을 받아서 배열의 크기만큼 반복문을 돌려라
	for(int i=0; str[i]; i++)
 18a:	21 96       	adiw	r28, 0x01	; 1
 18c:	f8 01       	movw	r30, r16
 18e:	ec 0f       	add	r30, r28
 190:	fd 1f       	adc	r31, r29
 192:	80 81       	ld	r24, Z
 194:	81 11       	cpse	r24, r1
 196:	f8 cf       	rjmp	.-16     	; 0x188 <UART0_print+0x10>
	{
		// 이때까지 받은 문자열을 송신
		UART0_Transmit(str[i]);
	}
	UART0_Transmit('\n');
 198:	8a e0       	ldi	r24, 0x0A	; 10
 19a:	ea df       	rcall	.-44     	; 0x170 <UART0_Transmit>
}
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	1f 91       	pop	r17
 1a2:	0f 91       	pop	r16
 1a4:	08 95       	ret

000001a6 <UART0_printNum>:

void UART0_printNum(uint16_t num)
{
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	cd b7       	in	r28, 0x3d	; 61
 1ac:	de b7       	in	r29, 0x3e	; 62
 1ae:	2a 97       	sbiw	r28, 0x0a	; 10
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	f8 94       	cli
 1b4:	de bf       	out	0x3e, r29	; 62
 1b6:	0f be       	out	0x3f, r0	; 63
 1b8:	cd bf       	out	0x3d, r28	; 61
	char buffer[10];
	itoa(num, buffer, 10);  // 정수 -> 문자열
 1ba:	4a e0       	ldi	r20, 0x0A	; 10
 1bc:	50 e0       	ldi	r21, 0x00	; 0
 1be:	be 01       	movw	r22, r28
 1c0:	6f 5f       	subi	r22, 0xFF	; 255
 1c2:	7f 4f       	sbci	r23, 0xFF	; 255
 1c4:	70 d0       	rcall	.+224    	; 0x2a6 <itoa>
	UART0_print(buffer);
 1c6:	ce 01       	movw	r24, r28
 1c8:	01 96       	adiw	r24, 0x01	; 1
 1ca:	d6 df       	rcall	.-84     	; 0x178 <UART0_print>
}
 1cc:	2a 96       	adiw	r28, 0x0a	; 10
 1ce:	0f b6       	in	r0, 0x3f	; 63
 1d0:	f8 94       	cli
 1d2:	de bf       	out	0x3e, r29	; 62
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	cd bf       	out	0x3d, r28	; 61
 1d8:	df 91       	pop	r29
 1da:	cf 91       	pop	r28
 1dc:	08 95       	ret

000001de <__vector_9>:
}

// 타이머2 output compare 이용
// 64분주로 설정하게되면 주기 4us를 250번 카운팅되면 => 1ms마다 인터럽트 발생됨
ISR(TIMER2_COMP_vect)
{
 1de:	1f 92       	push	r1
 1e0:	0f 92       	push	r0
 1e2:	0f b6       	in	r0, 0x3f	; 63
 1e4:	0f 92       	push	r0
 1e6:	11 24       	eor	r1, r1
 1e8:	0b b6       	in	r0, 0x3b	; 59
 1ea:	0f 92       	push	r0
 1ec:	2f 93       	push	r18
 1ee:	3f 93       	push	r19
 1f0:	4f 93       	push	r20
 1f2:	5f 93       	push	r21
 1f4:	6f 93       	push	r22
 1f6:	7f 93       	push	r23
 1f8:	8f 93       	push	r24
 1fa:	9f 93       	push	r25
 1fc:	af 93       	push	r26
 1fe:	bf 93       	push	r27
 200:	cf 93       	push	r28
 202:	df 93       	push	r29
 204:	ef 93       	push	r30
 206:	ff 93       	push	r31
	y_value = ADC_read(1);  // y축 adc값 (0 ~ 1023)
 208:	81 e0       	ldi	r24, 0x01	; 1
 20a:	63 df       	rcall	.-314    	; 0xd2 <ADC_read>
 20c:	ec 01       	movw	r28, r24
 20e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 212:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
	//uint16_t y_mapped = (y_value * 1000) / 1023; // 0 ~ 1000
	uint16_t y_mapped = y_value;
	UART1_printNum(y_mapped); // y값 (atmega -> 블루투스)
 216:	90 df       	rcall	.-224    	; 0x138 <UART1_printNum>
 218:	80 e0       	ldi	r24, 0x00	; 0
	
	
	// pc에서 디버깅용
	UART0_print("y :");
 21a:	91 e0       	ldi	r25, 0x01	; 1
 21c:	ad df       	rcall	.-166    	; 0x178 <UART0_print>
	UART0_printNum(y_mapped);
 21e:	ce 01       	movw	r24, r28
 220:	c2 df       	rcall	.-124    	; 0x1a6 <UART0_printNum>
 222:	ff 91       	pop	r31
}
 224:	ef 91       	pop	r30
 226:	df 91       	pop	r29
 228:	cf 91       	pop	r28
 22a:	bf 91       	pop	r27
 22c:	af 91       	pop	r26
 22e:	9f 91       	pop	r25
 230:	8f 91       	pop	r24
 232:	7f 91       	pop	r23
 234:	6f 91       	pop	r22
 236:	5f 91       	pop	r21
 238:	4f 91       	pop	r20
 23a:	3f 91       	pop	r19
 23c:	2f 91       	pop	r18
 23e:	0f 90       	pop	r0
 240:	0b be       	out	0x3b, r0	; 59
 242:	0f 90       	pop	r0
 244:	0f be       	out	0x3f, r0	; 63
 246:	0f 90       	pop	r0
 248:	1f 90       	pop	r1
 24a:	18 95       	reti

0000024c <main>:
 24c:	0b d0       	rcall	.+22     	; 0x264 <UART0_Init>


int main(void)
{
	UART0_Init();
	UART1_Init();
 24e:	18 d0       	rcall	.+48     	; 0x280 <UART1_Init>
 250:	81 b3       	in	r24, 0x11	; 17
	DDRD |= 1 << PD3; // uart1의 tx핀
 252:	88 60       	ori	r24, 0x08	; 8
 254:	81 bb       	out	0x11, r24	; 17
 256:	82 b1       	in	r24, 0x02	; 2
	DDRE |= 1 << PE1; // uart0의 tx핀
 258:	82 60       	ori	r24, 0x02	; 2
 25a:	82 b9       	out	0x02, r24	; 2
	
	ADC_init();
 25c:	35 df       	rcall	.-406    	; 0xc8 <ADC_init>
 25e:	45 df       	rcall	.-374    	; 0xea <Timer_init>
	Timer_init();
 260:	78 94       	sei
 262:	ff cf       	rjmp	.-2      	; 0x262 <main+0x16>

00000264 <UART0_Init>:
	sei();
 264:	8b b1       	in	r24, 0x0b	; 11
 266:	82 60       	ori	r24, 0x02	; 2
﻿#include "uart0.h"

void UART0_Init()
{
	UCSR0A |= 1 << U2X0;
 268:	8b b9       	out	0x0b, r24	; 11
	UBRR0H = 0;
 26a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	UBRR0L = BAUD_9600;
 26e:	8f ec       	ldi	r24, 0xCF	; 207
 270:	89 b9       	out	0x09, r24	; 9
	UCSR0B |= 1 << RXEN0 | 1 << RXCIE0;
 272:	8a b1       	in	r24, 0x0a	; 10
 274:	80 69       	ori	r24, 0x90	; 144
 276:	8a b9       	out	0x0a, r24	; 10
	UCSR0B |= 1 << TXEN0; // | 1 << TXCIE0;
 278:	8a b1       	in	r24, 0x0a	; 10
 27a:	88 60       	ori	r24, 0x08	; 8
 27c:	8a b9       	out	0x0a, r24	; 10
 27e:	08 95       	ret

00000280 <UART1_Init>:
﻿#include "uart1.h"

void UART1_Init()
{
	UCSR1A |= 1 << U2X1;
 280:	eb e9       	ldi	r30, 0x9B	; 155
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	82 60       	ori	r24, 0x02	; 2
 288:	80 83       	st	Z, r24
	UBRR1H = 0;
 28a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
	UBRR1L = BAUD_9600;
 28e:	8f ec       	ldi	r24, 0xCF	; 207
 290:	80 93 99 00 	sts	0x0099, r24	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
	UCSR1B |= 1 << RXEN1 | 1 << RXCIE1;
 294:	ea e9       	ldi	r30, 0x9A	; 154
 296:	f0 e0       	ldi	r31, 0x00	; 0
 298:	80 81       	ld	r24, Z
 29a:	80 69       	ori	r24, 0x90	; 144
 29c:	80 83       	st	Z, r24
	UCSR1B |= 1 << TXEN1; // | 1 << TXCIE0;
 29e:	80 81       	ld	r24, Z
 2a0:	88 60       	ori	r24, 0x08	; 8
 2a2:	80 83       	st	Z, r24
 2a4:	08 95       	ret

000002a6 <itoa>:
 2a6:	45 32       	cpi	r20, 0x25	; 37
 2a8:	51 05       	cpc	r21, r1
 2aa:	18 f4       	brcc	.+6      	; 0x2b2 <itoa+0xc>
 2ac:	42 30       	cpi	r20, 0x02	; 2
 2ae:	08 f0       	brcs	.+2      	; 0x2b2 <itoa+0xc>
 2b0:	04 c0       	rjmp	.+8      	; 0x2ba <__itoa_ncheck>
 2b2:	fb 01       	movw	r30, r22
 2b4:	10 82       	st	Z, r1
 2b6:	cb 01       	movw	r24, r22
 2b8:	08 95       	ret

000002ba <__itoa_ncheck>:
 2ba:	bb 27       	eor	r27, r27
 2bc:	4a 30       	cpi	r20, 0x0A	; 10
 2be:	31 f4       	brne	.+12     	; 0x2cc <__itoa_ncheck+0x12>
 2c0:	99 23       	and	r25, r25
 2c2:	22 f4       	brpl	.+8      	; 0x2cc <__itoa_ncheck+0x12>
 2c4:	bd e2       	ldi	r27, 0x2D	; 45
 2c6:	90 95       	com	r25
 2c8:	81 95       	neg	r24
 2ca:	9f 4f       	sbci	r25, 0xFF	; 255
 2cc:	01 c0       	rjmp	.+2      	; 0x2d0 <__utoa_common>

000002ce <__utoa_ncheck>:
 2ce:	bb 27       	eor	r27, r27

000002d0 <__utoa_common>:
 2d0:	fb 01       	movw	r30, r22
 2d2:	55 27       	eor	r21, r21
 2d4:	aa 27       	eor	r26, r26
 2d6:	88 0f       	add	r24, r24
 2d8:	99 1f       	adc	r25, r25
 2da:	aa 1f       	adc	r26, r26
 2dc:	a4 17       	cp	r26, r20
 2de:	10 f0       	brcs	.+4      	; 0x2e4 <__utoa_common+0x14>
 2e0:	a4 1b       	sub	r26, r20
 2e2:	83 95       	inc	r24
 2e4:	50 51       	subi	r21, 0x10	; 16
 2e6:	b9 f7       	brne	.-18     	; 0x2d6 <__utoa_common+0x6>
 2e8:	a0 5d       	subi	r26, 0xD0	; 208
 2ea:	aa 33       	cpi	r26, 0x3A	; 58
 2ec:	08 f0       	brcs	.+2      	; 0x2f0 <__utoa_common+0x20>
 2ee:	a9 5d       	subi	r26, 0xD9	; 217
 2f0:	a1 93       	st	Z+, r26
 2f2:	00 97       	sbiw	r24, 0x00	; 0
 2f4:	79 f7       	brne	.-34     	; 0x2d4 <__utoa_common+0x4>
 2f6:	b1 11       	cpse	r27, r1
 2f8:	b1 93       	st	Z+, r27
 2fa:	11 92       	st	Z+, r1
 2fc:	cb 01       	movw	r24, r22
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <strrev>

00000300 <strrev>:
 300:	dc 01       	movw	r26, r24
 302:	fc 01       	movw	r30, r24
 304:	67 2f       	mov	r22, r23
 306:	71 91       	ld	r23, Z+
 308:	77 23       	and	r23, r23
 30a:	e1 f7       	brne	.-8      	; 0x304 <strrev+0x4>
 30c:	32 97       	sbiw	r30, 0x02	; 2
 30e:	04 c0       	rjmp	.+8      	; 0x318 <strrev+0x18>
 310:	7c 91       	ld	r23, X
 312:	6d 93       	st	X+, r22
 314:	70 83       	st	Z, r23
 316:	62 91       	ld	r22, -Z
 318:	ae 17       	cp	r26, r30
 31a:	bf 07       	cpc	r27, r31
 31c:	c8 f3       	brcs	.-14     	; 0x310 <strrev+0x10>
 31e:	08 95       	ret

00000320 <_exit>:
 320:	f8 94       	cli

00000322 <__stop_program>:
 322:	ff cf       	rjmp	.-2      	; 0x322 <__stop_program>
